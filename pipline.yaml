trigger:
  - main

pool:
  vmImage: "ubuntu-latest"
  
stages:
  - stage: Checkout
    jobs:
      - job: CheckoutCode
        steps:
          - checkout: self

  - stage: Deploy
    dependsOn: Checkout
    jobs:
      - job: Deploy
        steps:
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
          displayName: 'Terraform : azurerm'
          inputs:
            workingDirectory: IAC
            backendAzureRmUseEnvironmentVariablesForAuthentication: false
            backendAzureRmUseEntraIdForAuthentication: false
            backendServiceArm: AzureCloud
            backendAzureRmResourceGroupName: AISDLC
            backendAzureRmStorageAccountName: aistatefile
            backendAzureRmContainerName: statefile
            backendAzureRmKey: terraform.tfstate
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
          displayName: 'Terraform : azurerm'
          inputs:
            command: apply
            workingDirectory: IAC
            environmentServiceNameAzureRM: AzureCloud
            backendAzureRmUseEnvironmentVariablesForAuthentication: false
            backendAzureRmUseEntraIdForAuthentication: false   
  - stage: Build
    dependsOn: Deploy
    jobs:
      - job: Build
        steps:
          # Build backend using Maven
          - task: MavenInstaller@3
            inputs:
              versionSpec: '3.x'
        
          - task: MavenPOMBuild@3
            inputs:
              projectFile: 'backend/pom.xml'
              goals: 'package'
        
          # Build frontend using Gradle
          - task: GradleInstaller@1
            inputs:
              gradleVersion: 'latest'
        
          - task: GradleBuild@2
            inputs:
              projectFile: 'frontend/build.gradle'
              tasks: 'build'
        
          # Copy artifacts to Tomcat webapps folder
          - task: CopyFiles@2
            inputs:
              contents: '**/target/*.war'
              targetFolder: '/opt/tomcat/webapps'
              overWrite: true
              flattenFolders: true
              hostName: '$(vm-hostname)'
              username: '$(vm-username)'
              password: '$(vm-password)'
      
  - stage: APITests
    dependsOn: Deploy
    jobs:
      - job: RunAPITests
        steps:
          - script: |
              chmod +x ./scripts/run-api-tests.sh
              sh ./scripts/run-api-tests.sh
            displayName: "Run API Tests Stage"
          - task: PublishPipelineArtifact@1
            displayName: "Publish API test results"
            condition: always()
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/artifacts
              artifactName: api-test-results
              artifactType: PipelineArtifact

  - stage: UITests
    dependsOn: APITests
    jobs:
      - job: RunUITests
        steps:
          - script: |
              chmod +x ./scripts/run-ui-tests.sh
              sh ./scripts/run-ui-tests.sh
            displayName: "Run UI Tests Stage"
          - task: PublishPipelineArtifact@1
            displayName: "Publish UI test results"
            condition: always()
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/artifacts
              artifactName: ui-test-results
              artifactType: PipelineArtifact
